@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    @{
        var a = 10;
        var num = 45;
        <div>@(a + num)</div>
        <div>@(a * num)</div>
    }
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>

    @{
        string[] cars = { "Dodge", "BMW", "Mercedes", "Volvo", "Porsche" };
    }
    <ul>
        @foreach (var car in cars)
        {
            <li>@car</li>
        }
    </ul>

    @functions
    {
        public int Multiply(int a, int b, int c, int d)
        {
            return a * b * c * d;
        }
        public int Division(int a, int b, int c, int d) => a / b / c / d;
    }

    <p>Multiply of numbers = <b>@Multiply(2,3,4,5)</b></p>
    <p>Division of numbers = <b>@Division(100,2,5,2)</b></p>
</div>



@*Обычно при обращении к веб-приложению пользователь ожидает получить веб-страницу с какими-нибудь данными.
В MVC для этого, как правило, используются представления, которые определяют внешний вид приложения и на основе которых потом формируется веб-страница.
В ASP.NET MVC Core представления - это файлы с расширением cshtml,
которые содержат код пользовательского интерфейса в основном на языке html, а также конструкции Razor - специального движка представлений,
который позволяет переходить от кода html к коду на языке C#.
Для хранения представлений в проекте ASP.NET Core предназначена папка Views.*@

@*Подобный проект для хранения представлений в папке Views определяет некоторую структуру:
Для каждого контроллера в проекте создается подкаталог в папке Views,
который называется по имени контроллера и который хранит представления, используемые методами данного контроллера.
По умолчанию имеется контроллер HomeController и для него в папке Views есть подкаталог Home с представлениями для методов контроллера HomeController - в данном случае
это файлы Index.cshtml и Privacy.cshtml.
Также здесь есть папка Shared, которая хранит общие представления для всех контроллеров.
По умолчанию это файлы _Layout.cshtml (используется в качестве мастер-страницы), Error.cshtml (использутся для отображения ошибок)
и _ValidationScripsPartial.cshtml (частичное представление, которое подключает скрипты валидации формы).
И в корне каталога Views также можно найти два файла _ViewImports.cshtml и _ViewStart.cshtml.
Эти файлы содержат код, который автоматически добавляется ко всем представлениям. _ViewImports.cshtml устанавливает некоторые общие для всех представлений пространства имен,
а _ViewStart.cshtml устанавливает общую мастер-страницу.*@